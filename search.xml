<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>基于 Python 的 Kivy 开发：首次配置 kivy</title>
    <url>/2020/11/08/Kivy-Firstly-Set/</url>
    <content><![CDATA[<h2 id="kivy"><a href="#kivy" class="headerlink" title="kivy"></a>kivy</h2><ul>
<li>kivy 是一个基于 Python 的 App 开发框架，基于 kivy进行移动端的 APP 开发是一个不错的选择。</li>
<li>首先，演示一下在 win10 环境下配置 kivy。</li>
</ul>
<p>1.直接 <code>pip install kivy</code></p>
<ul>
<li>自己写个 main.py 作为测试</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> kivy.app <span class="keyword">import</span> App</span><br><span class="line"><span class="keyword">from</span> kivy.uix.label <span class="keyword">import</span> Label</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainApp</span>(<span class="params">App</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build</span>(<span class="params">self</span>):</span></span><br><span class="line">        label = Label(text=<span class="string">&#x27;Hello from Kivy&#x27;</span>,</span><br><span class="line">                      size_hint=(<span class="number">.5</span>, <span class="number">.5</span>),</span><br><span class="line">                      pos_hint=&#123;<span class="string">&#x27;center_x&#x27;</span>: <span class="number">.5</span>, <span class="string">&#x27;center_y&#x27;</span>: <span class="number">.5</span>&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> label</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = MainApp()</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<ul>
<li>如果遇到问题</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">[CRITICAL] [App         ] Unable to get a Text provider, abort.</span><br></pre></td></tr></table></figure>

<p>则 terminal 执行下列语句（可能需要梯子）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install --upgraade pip wheel setuptools</span><br><span class="line">pip install docutils pygments pypiwin32 kivy.deps.sdl2 kivy.deps.glew</span><br><span class="line">pip install kivy.deps.gstreamer</span><br><span class="line">pip install kivy.deps.angle</span><br><span class="line">pip install --upgrade kivy</span><br></pre></td></tr></table></figure>

<p>2.运行之后可以看见下图，说明成功</p>
<img src="/2020/11/08/Kivy-Firstly-Set/kivySuccess.png" class="">
]]></content>
      <categories>
        <category>Kivy</category>
      </categories>
      <tags>
        <tag>author: zanxinz</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 检测第一次 / 新版本第一次进入 App</title>
    <url>/2020/11/09/detect-first-enter-in-ios/</url>
    <content><![CDATA[<p>项目中经常需要检测应用是否第一次打开，判断是否需要新手引导，将检测代码写在另一个 class 的静态方法中，再在需要的页面或 AppDelegate 中调用。</p>
<a id="more"></a>

<p>Swift:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检测第一次打开</span></span><br><span class="line"><span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">isFirstLaunch</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> isFirstLaunch = !<span class="type">UserDefaults</span>.standard.bool(forKey: <span class="string">&quot;hasBeenLaunched&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> isFirstLaunch</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">UserDefaults</span>.standard.<span class="keyword">set</span>(<span class="literal">true</span>, forKey: <span class="string">&quot;hasBeenLaunched&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> isFirstLaunch</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测第一次打开 / 新版本第一次打开</span></span><br><span class="line"><span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">isFirstLaunchOfNewVersion</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> defaults = <span class="type">UserDefaults</span>.standard;</span><br><span class="line">    <span class="keyword">let</span> currentVersion = <span class="type">Bundle</span>.main.infoDictionary![<span class="string">&quot;CFBundleShortVersionString&quot;</span>] <span class="keyword">as</span>! <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> lastLaunchVersion = defaults.string(forKey: <span class="string">&quot;lastLaunchVersion&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> (!lastLaunchVersion) &#123;</span><br><span class="line">        <span class="comment">// 第一次打开</span></span><br><span class="line">        defaults.<span class="keyword">set</span>(currentVersion, forKey: <span class="string">&quot;lastLaunchVersion&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (lastLaunchVersion != currentVersion) &#123;</span><br><span class="line">        <span class="comment">// 版本更新第一次打开</span></span><br><span class="line">        defaults.<span class="keyword">set</span>(currentVersion, forKey: <span class="string">&quot;lastLaunchVersion&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测某个页面是否第一次打开 / 新版本第一次打开（需要传递 classname）</span></span><br><span class="line"><span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">isFirstLaunchOfNewVersion</span><span class="params">(inClassName name: String)</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> defaults = <span class="type">UserDefaults</span>.standard;</span><br><span class="line">    <span class="keyword">let</span> currentVersion = <span class="type">Bundle</span>.main.infoDictionary![<span class="string">&quot;CFBundleShortVersionString&quot;</span>] <span class="keyword">as</span>! <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> lastLaunchVersion = defaults.string(forKey: <span class="string">&quot;lastLaunchVersion_&quot;</span> + name)</span><br><span class="line">    <span class="keyword">if</span> (!lastLaunchVersion) &#123;</span><br><span class="line">        <span class="comment">// 第一次打开</span></span><br><span class="line">        defaults.<span class="keyword">set</span>(currentVersion, forKey: <span class="string">&quot;lastLaunchVersion_&quot;</span> + name)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (lastLaunchVersion != currentVersion) &#123;</span><br><span class="line">        <span class="comment">// 版本更新第一次打开</span></span><br><span class="line">        defaults.<span class="keyword">set</span>(currentVersion, forKey: <span class="string">&quot;lastLaunchVersion_&quot;</span> + name)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于检测某个页面是否第一次打开只需在目标 ViewController 里加上</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (isFirstLaunchOfNewVersion(inClassName: <span class="type">String</span>(describing: <span class="keyword">self</span>.classForCoder))) &#123;</span><br><span class="line">    <span class="comment">// print(&quot;第一次打开，启动新手引导&quot;)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Objective-C:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">+ (<span class="built_in">BOOL</span>) isFirstLaunch &#123;</span><br><span class="line">    <span class="built_in">BOOL</span> isFirstLaunch = ![[<span class="built_in">NSUserDefaults</span> standardUserDefaults] boolForKey:<span class="string">@&quot;hasBeenLaunched&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span> (isFirstLaunch) &#123;</span><br><span class="line">        [[<span class="built_in">NSUserDefaults</span> standardUserDefaults] setBool:<span class="literal">YES</span> forKey:<span class="string">@&quot;hasBeenLaunched&quot;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> isFirstLaunch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">BOOL</span>) isFirstLaunchOfNewVersion &#123;</span><br><span class="line">    <span class="built_in">NSUserDefaults</span> *defaults = [<span class="built_in">NSUserDefaults</span> standardUserDefaults];</span><br><span class="line">    <span class="built_in">NSString</span> *currentVersion = [[[<span class="built_in">NSBundle</span> mainBundle] infoDictionary] objectForKey:<span class="string">@&quot;CFBundleShortVersionString&quot;</span>];</span><br><span class="line">    <span class="built_in">NSString</span> *lastLaunchVersion = [defaults objectForKey:<span class="string">@&quot;lastLaunchVersion&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span> (!lastLaunchVersion) &#123;</span><br><span class="line">        <span class="comment">// 第一次打开</span></span><br><span class="line">        [defaults setObject:currentVersion forKey:<span class="string">@&quot;lastLaunchVersion&quot;</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (![lastLaunchVersion isEqualToString:currentVersion]) &#123;</span><br><span class="line">        <span class="comment">// 版本更新第一次打开</span></span><br><span class="line">        [defaults setObject:currentVersion forKey:<span class="string">@&quot;lastLaunchVersion&quot;</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">BOOL</span>) isFirstLaunchOfNewVersionInClassName:(<span class="built_in">NSString</span> *)name &#123;</span><br><span class="line">    <span class="built_in">NSUserDefaults</span> *defaults = [<span class="built_in">NSUserDefaults</span> standardUserDefaults];</span><br><span class="line">    <span class="built_in">NSString</span> *currentVersion = [[[<span class="built_in">NSBundle</span> mainBundle] infoDictionary] objectForKey:<span class="string">@&quot;CFBundleShortVersionString&quot;</span>];</span><br><span class="line">    <span class="built_in">NSString</span> *lastLaunchVersion = [defaults objectForKey:[<span class="string">@&quot;lastLaunchVersion_&quot;</span> stringByAppendingString:name]];</span><br><span class="line">    <span class="keyword">if</span> (!lastLaunchVersion) &#123;</span><br><span class="line">        <span class="comment">// 第一次打开</span></span><br><span class="line">        [defaults setObject:currentVersion forKey:[<span class="string">@&quot;lastLaunchVersion_&quot;</span> stringByAppendingString:name]];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (![lastLaunchVersion isEqualToString:currentVersion]) &#123;</span><br><span class="line">        <span class="comment">// 版本更新第一次打开</span></span><br><span class="line">        [defaults setObject:currentVersion forKey:[<span class="string">@&quot;lastLaunchVersion_&quot;</span> stringByAppendingString:name]];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于检测某个页面是否第一次打开只需在目标 ViewController 里加上</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (isFirstLaunchOfNewVersionInClassName:<span class="built_in">NSStringFromClass</span>([<span class="keyword">self</span> <span class="keyword">class</span>])) &#123;</span><br><span class="line">    <span class="comment">// print(&quot;第一次打开，启动新手引导&quot;)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>iOS</category>
        <category>实用</category>
      </categories>
      <tags>
        <tag>author: cloxnu</tag>
        <tag>Swift</tag>
        <tag>Objective-C</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在没接触过 macOS 开发的情况下 4 个小时写一个学校爬电费状态栏 App</title>
    <url>/2019/12/08/energy-charge-in-macos/</url>
    <content><![CDATA[<p><a href="https://github.com/CLOXnu/Energy_Charge_in_MacOS">GitHub 链接</a></p>
<h2 id="2020-05-23-00-35-更新"><a href="#2020-05-23-00-35-更新" class="headerlink" title="2020-05-23 00:35 更新"></a>2020-05-23 00:35 更新</h2><p>连接错误变灰</p>


<p>低电费变红</p>
<img src="/2019/12/08/energy-charge-in-macos/charge_low.jpg" class="" title="charge_low">

<p>其他寝室</p>
<img src="/2019/12/08/energy-charge-in-macos/other_room.jpg" class="" title="other_room">

<h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>学校寝室里配了台台式，写了大半学期的 iOS，这一切都如此顺利。</p>
<p>不过就在刚刚，一位大佬朋友突然向我展示了他找到的查寝室电费网址 POST 参数。这不禁让我陷入了思考（因为平常我得经常看着点电费不然没电费了电脑黑屏警告233）。然后我顺便查了下我们寝室的电费，nm只有 1 块 5 了！！！</p>
<p>开发一个 macOS 的爬电费 App 就这样开始了。</p>
<p>—- 四个小时前</p>
<a id="more"></a>

<h2 id="Hardworking"><a href="#Hardworking" class="headerlink" title="Hardworking"></a>Hardworking</h2><p>Xcode - File - New - Project…</p>
<p>然后选择 macOS App，这一切看起来如此自然，然而第一个困扰我的出现了 — url request 如何实现。</p>
<p>一向喜欢用第三方库的我，果不其然又发现了一个好用的 url request 库，它叫 <code>Alamofire</code>。这个库用来写请求超级超级容易，不过我完全不知道请求完成后得到的 <code>request</code> 应该怎么用，后来找到它的文档这里</p>
<img src="/2019/12/08/energy-charge-in-macos/Alamofire.png" class="" title="Alamofire">

<p>噢，原来我获得的就是这个网址的 JSON 数据，我只需要使用官方的 <code>JSONSerialization</code> 类就行了，于是我就写成了下面这样，把 JSON 转换 <code>NSDictionary</code> 一层层不断获取，成功得到了电费数值，并将它们写到一个类里去，加了一些代理以便其他类能够得到电费变更通知或错误通知。</p>
<img src="/2019/12/08/energy-charge-in-macos/code.png" class="" title="code">

<p>可能你们都看到了，我设定了一个定时器每隔 5 分钟获取一次数据（虽然不知道会不会有电脑睡眠断定时器之类的问题毕竟这是 1.0 版本不想考虑那么多），于是我寻思还需要增加一个手动更新数据的位置，而且查看数据肯定要一个方便的位置，emmmm，就状态栏吧，看那么多应用都在上面应该没啥问题。。。</p>
<p>于是，第二个难点。。。如何在状态栏显示内容。</p>
<p>其实了解之后还是很简单，在 Storyboard 加一个菜单列表就行了，然后在一个新的类里把这个菜单设为状态栏菜单。看起来挺简单吧，操作起来也挺简单的。</p>
<img src="/2019/12/08/energy-charge-in-macos/storyboard.png" class="" title="storyboard">

<p>好了，四个小时过去了，这个小插件其实很简单，但自己也学到了不少。</p>
<h2 id="成型"><a href="#成型" class="headerlink" title="成型"></a>成型</h2><img src="/2019/12/08/energy-charge-in-macos/display.png" class="" title="display">
]]></content>
      <categories>
        <category>macOS</category>
      </categories>
      <tags>
        <tag>author: cloxnu</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title>Get Start</title>
    <url>/2020/11/06/get-start/</url>
    <content><![CDATA[<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>请确保本机已安装 npm，<a href="https://www.npmjs.com/get-npm">官方链接</a></p>
<p>请确保已经 clone 这个 repo，<a href="https://github.com/bi-bi-boom/ERROR_LOG">GitHub 链接</a></p>
<p>请确保本机已安装 hexo，<a href="https://hexo.io/zh-cn/">官方链接</a></p>
<p>在根目录下运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h2><p>hexo 的规则参考 <a href="https://hexo.io/zh-cn/docs/writing">官网 doc</a></p>
<p>发布时，运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<p>来生成 public/ 目录；</p>
<p>运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>上传到 GitHub。</p>
<blockquote>
<p>关于文字排版参考 <a href="https://github.com/xitu/gold-miner/wiki/%E8%AF%91%E6%96%87%E6%8E%92%E7%89%88%E8%A7%84%E5%88%99%E6%8C%87%E5%8C%97">这篇文章</a></p>
</blockquote>
<h2 id="github-发布时权限问题"><a href="#github-发布时权限问题" class="headerlink" title="github 发布时权限问题"></a>github 发布时权限问题</h2><ul>
<li>hexo 发布 （deploy）之前需要先 在 git 里获得添加ssh</li>
<li>按下 Win 键寻找并且运行 Git Bash。没有的话百度或者 Google 下载一下，搜索 “git 下载”。</li>
<li>那一步 hexo d 如果最后没有成功，很可能是没有 git 权限。<ul>
<li>解决办法：配置关于自己 github 的 ssh。</li>
<li>.</li>
<li>.</li>
<li>.</li>
<li>.</li>
<li>.</li>
<li>.</li>
</ul>
</li>
<li>ssh 配置完成后重新 hexo d，就可以把本地的生成的内容发布到远端。</li>
</ul>
<h2 id="隔一段时间之后"><a href="#隔一段时间之后" class="headerlink" title="隔一段时间之后"></a>隔一段时间之后</h2><ul>
<li><p>本地的ssh很可能需要再次添加到本地客户端（不需要 github 再去生成 ssh 秘钥）下面是解决办法</p>
<ul>
<li>两句话：</li>
<li><blockquote>
<p>eval $(ssh-agent -s)</p>
</blockquote>
</li>
<li><blockquote>
<p>ssh-add ~/.ssh/zzxssh</p>
</blockquote>
</li>
</ul>
</li>
<li><p>其中这个 zzxssh是我命名的 ssh 许可文件</p>
</li>
<li><p>可以使用 ls -al ~/.ssh  先查看 ssh 文件有哪些</p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center">指令</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">hexo g</td>
<td align="center">本地生成静态html</td>
</tr>
<tr>
<td align="center">hexo d</td>
<td align="center">本地工程发布到远端</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
  </entry>
  <entry>
    <title>遇见 JVM 的第一印象</title>
    <url>/2020/11/13/java-first/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th align="center">术语</th>
<th align="center">全称</th>
<th align="center">中文</th>
</tr>
</thead>
<tbody><tr>
<td align="center">JDK</td>
<td align="center">Java Development Kit</td>
<td align="center">Java 开发工具包</td>
</tr>
<tr>
<td align="center">JRE</td>
<td align="center">Java Running Environment</td>
<td align="center">Java 运行环境</td>
</tr>
<tr>
<td align="center">JVM</td>
<td align="center">Java Virtual Machine</td>
<td align="center">Java 虚拟机器</td>
</tr>
<tr>
<td align="center">JSR</td>
<td align="center">Java Specification Requests</td>
<td align="center">Java 规范提案</td>
</tr>
</tbody></table>
<hr>
<a id="more"></a>

<h2 id="Java-具有跨平台特性（体现在-class-和-JVM-的关系中）"><a href="#Java-具有跨平台特性（体现在-class-和-JVM-的关系中）" class="headerlink" title="Java 具有跨平台特性（体现在 .class 和 JVM 的关系中）"></a>Java 具有跨平台特性（体现在 .class 和 JVM 的关系中）</h2><ul>
<li>真正在机器上运行的是二进制码。</li>
<li>本机的的编译器把源代码（程序员写的东西）翻译成二进制码。</li>
<li>以前的编译器（比如C、C++），编译之后的代码只能在同样的平台上运行（如 Windows 编译后的内容无法在 Linux 上使用）。这就是跨平台的问题。</li>
<li>Java 通过 JVM（JAVA Virtual Machine）解决跨平问题。</li>
<li>JVM 负责把 .java 格式文件编译成 .class 的文件。</li>
<li><strong>.class 是通用的</strong>。<ul>
<li>不管机器是哪个平台的（Window、Linux或是 MAC OS），只要机器中装有 JVM，JVM 就可以把 .class 翻译成适应本机的二进制代码，然后可以直接运行。这也正是 Java 的「编译一次，到处执行。」思想的所在。</li>
</ul>
</li>
<li>JDK（Java Development Kit） 包含了好几个工具。<ul>
<li>javac：编译器，把 .java 编译成 .class</li>
<li>java：运行工具，直接运行 .class 后缀的文件</li>
<li>jar：打包工具，把相关类文件打包成 jar 包</li>
<li>javadoc：文档生成工具，从源码中提取注释，注释需要符合规范</li>
<li>初学者常用的是上面这几个工具，后面还有十几个，这个留到学到的时候再做展开。</li>
</ul>
</li>
</ul>
<h2 id="Java-是一个标准"><a href="#Java-是一个标准" class="headerlink" title="Java 是一个标准"></a>Java 是一个标准</h2><ul>
<li>像System、out、println这些名称，都是标准中所规范的名称。前人依据 JSR 标准文件，写出了一套标准的程序库（如 Java SE API 里面就包含各种标准API，以 .class 的形式）。</li>
<li>需要有人写出 System.java 编译后为 System.class，第一个程序里面写这样，我才能使用 System类（class）里面的 out 对象（object）的 print 方法（Method）。</li>
<li>而 JRE（Java Running Environment）就包含了 Java SE API 和 JVM 。<ul>
<li>运行编译好的文件（.class），只需要 JRE ，因为自己写的程序里面调用了Java SE API里的方法。而如果要自己编写源程序并且进行编译（需要用到javac），则只需要 JDK。</li>
</ul>
</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>author: zanxinz</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 对象的浅复制和深复制</title>
    <url>/2020/11/14/java-object-copy/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th align="center">英文</th>
<th align="center">名称</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Shallow copy</td>
<td align="center">浅复制</td>
</tr>
<tr>
<td align="center">Deep copy</td>
<td align="center">深复制</td>
</tr>
<tr>
<td align="center">Lazy copy</td>
<td align="center">延迟复制</td>
</tr>
</tbody></table>
<hr>
<a id="more"></a>

<h2 id="浅复制"><a href="#浅复制" class="headerlink" title="浅复制"></a>浅复制</h2><ul>
<li><p>原理</p>
<img src="/2020/11/14/java-object-copy/Java%E6%B5%85%E5%A4%8D%E5%88%B6.png" class="">
</li>
<li><p>类图</p>
<img src="/2020/11/14/java-object-copy/UML.png" class="">
</li>
<li><p>wallet.java</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> smallClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wallet</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> money;<span class="comment">//钱数</span></span><br><span class="line">  <span class="keyword">private</span> String rank;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 带初始余额的构造方法</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> money 初始余额</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Wallet</span><span class="params">(<span class="keyword">int</span> money,String rank)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">   <span class="keyword">this</span>.setMoney(money);</span><br><span class="line">   <span class="keyword">this</span>.setRank(rank);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 设置钱包的余额</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> money 钱包的余额</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 设置余额是否成功</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(<span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.money=money;</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 设置钱包的称号</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> rank 钱包的称号</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRank</span><span class="params">(String rank)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.rank=rank;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取钱包的余额</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 钱包的余额</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> money;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取钱包称号</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> rank 钱包的称号</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getRank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.rank;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>Student.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> smallClass;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 学生类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Zanxin</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> Wallet wallet;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> money,String rank)</span> </span>&#123;</span><br><span class="line">    setName(name);</span><br><span class="line">    wallet=<span class="keyword">new</span> Wallet(money,rank);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 获取学生姓名</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> name 学生姓名</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 获取钱包余额</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> Wallet.money 钱包的余额</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> wallet.getMoney();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取钱包称号</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> Wallet.rank 钱包的称号</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getWalletRank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.wallet.getRank();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 设置姓名</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> name 学生姓名</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 设置钱包余额</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> money 钱包余额</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWalletMoney</span><span class="params">(<span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.wallet.setMoney(money);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 设置钱包称号</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> rank 钱包的称号</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWalletRank</span><span class="params">(String rank)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.wallet.setRank(rank);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">   <span class="keyword">try</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">     &#125;<span class="keyword">catch</span>(CloneNotSupportedException e)&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>console.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> smallClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Console</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   Student stu=<span class="keyword">new</span> Student(<span class="string">&quot;维多利亚&quot;</span>, <span class="number">50</span>,<span class="string">&quot;菜鸟&quot;</span>);</span><br><span class="line">   Student stu2=(Student) stu.clone();</span><br><span class="line">  </span><br><span class="line">   System.out.println(stu.getName()+stu.getMoney()+stu.getWalletRank());</span><br><span class="line">   System.out.println(stu2.getName()+stu2.getMoney()+stu2.getWalletRank());</span><br><span class="line">  </span><br><span class="line">   stu2.setName(<span class="string">&quot;朱丽叶&quot;</span>);</span><br><span class="line">   stu2.setWalletMoney(<span class="number">20</span>);<span class="comment">//只是改了stu2 而stu却跟着一起变（这个money是money里面的，而整个wallet是共享的）</span></span><br><span class="line">   stu2.setWalletRank(<span class="string">&quot;青铜&quot;</span>);</span><br><span class="line">  </span><br><span class="line">   System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line">   System.out.println(<span class="string">&quot;修改后：&quot;</span>);</span><br><span class="line">   System.out.println(stu.getName()+stu.getMoney()+stu.getWalletRank());<span class="comment">//stu的wallet很无辜地被改变</span></span><br><span class="line">   System.out.println(stu2.getName()+stu2.getMoney()+stu2.getWalletRank());</span><br><span class="line">   System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>运行结果 <img src="/2020/11/14/java-object-copy/%E6%B5%85%E5%A4%8D%E5%88%B6%E7%BB%93%E6%9E%9C.png" class="">

</li>
</ul>
<hr>
<h2 id="深复制"><a href="#深复制" class="headerlink" title="深复制"></a>深复制</h2><ul>
<li><p>原理</p>
<img src="/2020/11/14/java-object-copy/Java%E6%B7%B1%E5%A4%8D%E5%88%B6.png" class=""></li>
<li><p>类图</p>
<img src="/2020/11/14/java-object-copy/UML.png" class="">
</li>
<li><p>wallet.java</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> smallClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wallet</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> money;<span class="comment">//钱数</span></span><br><span class="line">  <span class="keyword">private</span> String rank;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 带初始余额的构造方法</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> money 初始余额</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Wallet</span><span class="params">(<span class="keyword">int</span> money,String rank)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">   <span class="keyword">this</span>.setMoney(money);</span><br><span class="line">   <span class="keyword">this</span>.setRank(rank);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 设置钱包的余额</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> money 钱包的余额</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 设置余额是否成功</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(<span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.money=money;</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 设置钱包的称号</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> rank 钱包的称号</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRank</span><span class="params">(String rank)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.rank=rank;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取钱包的余额</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 钱包的余额</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> money;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取钱包称号</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> rank 钱包的称号</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getRank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.rank;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Student.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> smallClass;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 学生类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Zanxin</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> Wallet wallet;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> money,String rank)</span> </span>&#123;</span><br><span class="line">    setName(name);</span><br><span class="line">    wallet=<span class="keyword">new</span> Wallet(money,rank);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 获取学生姓名</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> name 学生姓名</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 获取钱包余额</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> Wallet.money 钱包的余额</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> wallet.getMoney();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取钱包称号</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> Wallet.rank 钱包的称号</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getWalletRank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.wallet.getRank();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 设置姓名</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> name 学生姓名</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 设置钱包余额</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> money 钱包余额</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWalletMoney</span><span class="params">(<span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.wallet.setMoney(money);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 设置钱包称号</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> rank 钱包的称号</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWalletRank</span><span class="params">(String rank)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.wallet.setRank(rank);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Student(name,wallet.getMoney(),wallet.getRank());<span class="comment">//生成新对象</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Console.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> smallClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Console</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   Student stu=<span class="keyword">new</span> Student(<span class="string">&quot;维多利亚&quot;</span>, <span class="number">50</span>,<span class="string">&quot;菜鸟&quot;</span>);</span><br><span class="line">   Student stu2=(Student) stu.clone();</span><br><span class="line">  </span><br><span class="line">   System.out.println(stu.getName()+stu.getMoney()+stu.getWalletRank());</span><br><span class="line">   System.out.println(stu2.getName()+stu2.getMoney()+stu2.getWalletRank());</span><br><span class="line">  </span><br><span class="line">   stu2.setName(<span class="string">&quot;朱丽叶&quot;</span>);</span><br><span class="line">   stu2.setWalletMoney(<span class="number">20</span>);<span class="comment">//只是改了stu2 而stu却跟着一起变（这个money是money里面的，而整个wallet是共享的）</span></span><br><span class="line">   stu2.setWalletRank(<span class="string">&quot;青铜&quot;</span>);</span><br><span class="line">  </span><br><span class="line">   System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line">   System.out.println(<span class="string">&quot;修改后：&quot;</span>);</span><br><span class="line">   System.out.println(stu.getName()+stu.getMoney()+stu.getWalletRank());<span class="comment">//stu的wallet很无辜地被改变</span></span><br><span class="line">   System.out.println(stu2.getName()+stu2.getMoney()+stu2.getWalletRank());</span><br><span class="line">   System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>运行结果<img src="/2020/11/14/java-object-copy/%E6%B7%B1%E5%A4%8D%E5%88%B6%E7%BB%93%E6%9E%9C.png" class="">

</li>
</ul>
<hr>
<h3 id="浅复制和深复制的具体差异"><a href="#浅复制和深复制的具体差异" class="headerlink" title="浅复制和深复制的具体差异"></a>浅复制和深复制的具体差异</h3><ul>
<li><p>本示例中</p>
<ul>
<li><strong>实现Cloneable接口时重写了clone方法的方式不一样</strong></li>
<li>而用到的各个类之间的关系是一样的（只有重写 clone 方法不同，其他地方一模一样）</li>
</ul>
</li>
<li><p>浅复制重写clone</p>
<ul>
<li>这时候 stu 的 wallet 和 stu2 的 wallet 会指向同一个 wallet 对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">super</span>.clone();<span class="comment">//父类clone方法默认是浅复制</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(CloneNotSupportedException e) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>深复制重写clone</p>
<ul>
<li>这时候 stu 的 wallet 和 stu2 的 wallet 指向不同的 wallet 对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Student(name,wallet.getMoney(),wallet.getRank());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="延迟复制"><a href="#延迟复制" class="headerlink" title="延迟复制"></a>延迟复制</h2><ul>
<li>像是浅复制，又像是深复制</li>
<li>多个引用共享一个对象，当通过某个引用要改变对象的内容时，会生成一个新对象给这个引用使用，所以也叫做[写时拷贝]。</li>
<li>提高了深复制的性能，避开了浅复制的“改一个，影响大家”的问题。</li>
</ul>
<h2 id="复制的默认形式"><a href="#复制的默认形式" class="headerlink" title="复制的默认形式"></a>复制的默认形式</h2><ul>
<li>基础类型对象：直接复制。因为基础类型没有对象，不存在深复制问题。（Integer Double String）</li>
<li>数组、集合都是浅复制</li>
<li>Cloneable 接口的 clone ：浅复制</li>
<li>String str2 = new String(“ABC”);<strong>至少创建一个对象，也可能两个</strong>。因为用到new关键字，肯定会在heap中创建一个str2的String对象，它的value是“ABC”。同时如果 “ABC” 这个字符串在java String池里不存在，会在java池里创建这个String对象 “ABC”</li>
<li>浅复制 复制了引用</li>
<li>深复制 复制了引用和它所引用的内容，一层一层进去复制</li>
</ul>
<h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><ul>
<li>如果把一个对象序列化，再反序列化给一个新对象，就可以实现复制功能。</li>
<li>优势<ul>
<li>操作简便</li>
</ul>
</li>
<li>缺陷<ul>
<li>不能序列化 transient 变量。</li>
<li>效率低，它比通过实现Clonable接口这种方式来进行深复制几乎多花100倍的时间。</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>author: zanxinz</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 jsDelivr 的简单建站思路</title>
    <url>/2020/07/26/simple-website-building-ideas-based-on-jsdelivr/</url>
    <content><![CDATA[<p>暑假期间，心血来潮想要写一个自己的 travel blog，想要用最低成本的方式写一个最稳定的 blog 网站，以下是我制作这个网站的总体思路，仅供参考。</p>
<h4 id="我使用的服务"><a href="#我使用的服务" class="headerlink" title="我使用的服务"></a>我使用的服务</h4><ul>
<li>服务器提供商使用 <a href="https://www.linode.com/">Linode</a>，位于美国加州。</li>
<li>使用 <a href="https://www.cloudflare.com/">Cloudflare</a> 作为全球 cdn 加速。</li>
<li>将全站备份于 GitHub，并使用 <a href="https://www.jsdelivr.com/">jsDelivr</a> 加速 GitHub 上的静态资源。</li>
</ul>
<a id="more"></a>

<p>这个网站是 <a href="https://an.dog/">an.dog</a>，以下是 logo 和截图。</p>
<img src="/2020/07/26/simple-website-building-ideas-based-on-jsdelivr/travelDogIconHome.svg" class="">

<img src="/2020/07/26/simple-website-building-ideas-based-on-jsdelivr/travelDogHome.png" class="">

<h2 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h2><p>jsDelivr 的作用主要用来加速需网络速度较快的静态资源，如图片、视频等等。由于 jsDelivr 在国内有服务器，所以国内的访问速度很快，jsDelivr 的使用参考 <a href="https://www.jsdelivr.com/">官网</a>，简单来说就是通过请求 URL <code>https://cdn.jsdelivr.net/gh/[用户名]/[仓库名]/[文件路径]</code> 来访问 GitHub 里的文件，由于有时候 GitHub 的修改可能导致 jsDelivr 没有及时更新，建议在 GitHub 用 release 的方式进行 cdn 加速，这种方法需要访问 <code>https://cdn.jsdelivr.net/gh/[用户名]/[仓库名]@[版本名]/[文件路径]</code> 来使用 cdn。<a href="https://github.com/CLOXnu/travelblog">an.dog 的 GitHub 链接</a></p>
<p>整站的文章写在根目录的 <code>content/</code> 目录下，每篇文章带有一个 <code>info.json</code>，用来列举文章的详细信息。后端语言使用 PHP，动态读取 <code>content/</code> 目录下的文件，然后前端 JavaScript 将 Markdown 转为 Html。</p>
<p>这里使用一个 JavaScript 工具 <a href="https://marked.js.org/">Marked</a> 完成 Markdown 转 Html 的工作。在 Marked 的说明文档中介绍到，可以使用 renderer 将 Markdown 转换过程中遇到指定的内容并转换成需要的格式，这样就可以将文章中引用到的图片转换成 jsDelivr 的地址了（如下图）（那个 baseURL 就是 jsDelivr cdn 的前缀：<code>https://cdn.jsdelivr.net/gh/...</code>）</p>
<img src="/2020/07/26/simple-website-building-ideas-based-on-jsdelivr/marked.png" class="">

<blockquote>
<p>图片中那个 <code>level === 2 || level === 4</code> 的意思是我将标题等级为 2 和 4 的标题加一个 id，后面可以定位这些标题。</p>
</blockquote>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>author: cloxnu</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>test</title>
    <url>/2020/11/05/test/</url>
    <content><![CDATA[<h1 id="标题-1"><a href="#标题-1" class="headerlink" title="标题 1"></a>标题 1</h1><h2 id="标题-2"><a href="#标题-2" class="headerlink" title="标题 2"></a>标题 2</h2><h3 id="标题-3"><a href="#标题-3" class="headerlink" title="标题 3"></a>标题 3</h3><h4 id="标题-4"><a href="#标题-4" class="headerlink" title="标题 4"></a>标题 4</h4><h5 id="标题-5"><a href="#标题-5" class="headerlink" title="标题 5"></a>标题 5</h5><h6 id="标题-6"><a href="#标题-6" class="headerlink" title="标题 6"></a>标题 6</h6><p>嗨，这里是中文测试。</p>
<p>Hey, there is english test.</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">code test</span><br></pre></td></tr></table></figure>

<p>javascript 代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">6</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Hello world&quot;</span>); <span class="comment">// 中文注释</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The <code>code</code> block looks good.</p>
<blockquote>
<p>quote block<br>引用块</p>
</blockquote>
<p><em>The</em> Bi-Bi-Boom <em>is</em> a <strong>team</strong> dedicated to <strong>BOOM</strong>. <del>line</del></p>
]]></content>
      <categories>
        <category>TEST</category>
      </categories>
  </entry>
  <entry>
    <title>算法刷题记录</title>
    <url>/2020/11/21/algorithm-exercise/</url>
    <content><![CDATA[<h2 id="剑指-Offer"><a href="#剑指-Offer" class="headerlink" title="剑指 Offer"></a>剑指 Offer</h2><a id="more"></a>

<h4 id="4-二维数组中的查找"><a href="#4-二维数组中的查找" class="headerlink" title="4. 二维数组中的查找"></a>4. 二维数组中的查找</h4><p>从数组右上角（或左下角）开始找，遇到比 target 小的向下（右）找，遇到比 target 大的向左（上）找。</p>
<h4 id="10-II-青蛙跳台阶问题"><a href="#10-II-青蛙跳台阶问题" class="headerlink" title="10 - II. 青蛙跳台阶问题"></a>10 - II. 青蛙跳台阶问题</h4><p>本题可转化为 <strong>求斐波那契数列第 n 项的值</strong>，使用动态规划求解</p>
<h4 id="11-旋转数组的最小数字"><a href="#11-旋转数组的最小数字" class="headerlink" title="11. 旋转数组的最小数字"></a>11. 旋转数组的最小数字</h4><p>二分查找：将中间值与最后一个值比较，若大，将 left = mid + 1，若小，将 right = mid，若等，则 right -= 1</p>
<h4 id="12-矩阵中的路径"><a href="#12-矩阵中的路径" class="headerlink" title="12. 矩阵中的路径"></a>12. 矩阵中的路径</h4><p>本质上是图的深搜，使用递归求解</p>
<h4 id="13-机器人的运动范围"><a href="#13-机器人的运动范围" class="headerlink" title="13. 机器人的运动范围"></a>13. 机器人的运动范围</h4><p>广搜模板题</p>
<h4 id="15-二进制中-1-的个数"><a href="#15-二进制中-1-的个数" class="headerlink" title="15. 二进制中 1 的个数"></a>15. 二进制中 1 的个数</h4><p>巧用 n &amp; (n-1)</p>
<h4 id="16-数值的整数次方"><a href="#16-数值的整数次方" class="headerlink" title="16. 数值的整数次方"></a>16. 数值的整数次方</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> n:</span><br><span class="line">    <span class="keyword">if</span> n &amp; <span class="number">1</span>: res *= x</span><br><span class="line">    x *= x</span><br><span class="line">    n &gt;&gt;= <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h4 id="17-打印从-1-到最大的-n-位数"><a href="#17-打印从-1-到最大的-n-位数" class="headerlink" title="17. 打印从 1 到最大的 n 位数"></a>17. 打印从 1 到最大的 n 位数</h4><p>有点深搜的意思</p>
<h4 id="19-正则表达式匹配"><a href="#19-正则表达式匹配" class="headerlink" title="19. 正则表达式匹配"></a>19. 正则表达式匹配</h4><p>动态规划/dfs</p>
<h4 id="20-表示数值的字符串"><a href="#20-表示数值的字符串" class="headerlink" title="20. 表示数值的字符串"></a>20. 表示数值的字符串</h4><p>有限状态机</p>
<h4 id="21-调整数组顺序使奇数位于偶数前"><a href="#21-调整数组顺序使奇数位于偶数前" class="headerlink" title="21. 调整数组顺序使奇数位于偶数前"></a>21. 调整数组顺序使奇数位于偶数前</h4><p>双指针，左遇偶停，右遇奇停</p>
<h4 id="24-反转链表"><a href="#24-反转链表" class="headerlink" title="24. 反转链表"></a>24. 反转链表</h4><p>双指针，一个在前一个在后，调整 next</p>
<h4 id="30-包含-min-函数的栈"><a href="#30-包含-min-函数的栈" class="headerlink" title="30. 包含 min 函数的栈"></a>30. 包含 min 函数的栈</h4><p>建立辅助栈，存储栈中所有非严格降序的元素，辅助栈中栈顶元素始终是最小值</p>
<h4 id="31-栈的压入、弹出序列"><a href="#31-栈的压入、弹出序列" class="headerlink" title="31. 栈的压入、弹出序列"></a>31. 栈的压入、弹出序列</h4><p>辅助栈模拟 push pop</p>
<h4 id="33-二叉查找树的后序遍历序列"><a href="#33-二叉查找树的后序遍历序列" class="headerlink" title="33. 二叉查找树的后序遍历序列"></a>33. 二叉查找树的后序遍历序列</h4><p>根据大小比较划分左右子树，验证左右子树区间的单调性</p>
<h4 id="34-二叉树中和为某一值的路径"><a href="#34-二叉树中和为某一值的路径" class="headerlink" title="34. 二叉树中和为某一值的路径"></a>34. 二叉树中和为某一值的路径</h4><p>回溯，target 减遍历到的每个值</p>
<h4 id="35-复杂链表的复制"><a href="#35-复杂链表的复制" class="headerlink" title="35. 复杂链表的复制"></a>35. 复杂链表的复制</h4><p>dfs + 哈希表</p>
<h4 id="36-二叉搜索树与双向链表"><a href="#36-二叉搜索树与双向链表" class="headerlink" title="36. 二叉搜索树与双向链表"></a>36. 二叉搜索树与双向链表</h4><p>中序遍历 + dfs</p>
<h4 id="38-字符串的排列"><a href="#38-字符串的排列" class="headerlink" title="38. 字符串的排列"></a>38. 字符串的排列</h4><p>dfs</p>
<h4 id="39-数组中出现次数超过一半的数字"><a href="#39-数组中出现次数超过一半的数字" class="headerlink" title="39. 数组中出现次数超过一半的数字"></a>39. 数组中出现次数超过一半的数字</h4><p>摩尔投票法，假设是当前数，票数为 0 抵消</p>
<h4 id="40-最小的-k-个数"><a href="#40-最小的-k-个数" class="headerlink" title="40. 最小的 k 个数"></a>40. 最小的 k 个数</h4><p>最大堆实现</p>
<h2 id="Leetcode"><a href="#Leetcode" class="headerlink" title="Leetcode"></a>Leetcode</h2><h4 id="3-无重复字符的最长字串"><a href="#3-无重复字符的最长字串" class="headerlink" title="3. 无重复字符的最长字串"></a>3. 无重复字符的最长字串</h4><p>滑窗，建 hash table，判断下一个字符是否在表，若在则 update table 并缩短滑窗。时间 n</p>
<h4 id="5-最长回文子串"><a href="#5-最长回文子串" class="headerlink" title="5. 最长回文子串"></a>5. 最长回文子串</h4><p>中心扩散。时间 n^2，空间 1</p>
<h4 id="7-整数反转"><a href="#7-整数反转" class="headerlink" title="7. 整数反转"></a>7. 整数反转</h4><p>原数 pop，reverse push，注意检查溢出：INT_MAX/10</p>
<h4 id="9-回文数"><a href="#9-回文数" class="headerlink" title="9. 回文数"></a>9. 回文数</h4><p>原数 pop，reverse push，直到 原数 &lt; reverse，判断 原数是否 == reverse，或者 == reverse / 10。时间 log n</p>
<h4 id="11-盛最多水的容器"><a href="#11-盛最多水的容器" class="headerlink" title="11. 盛最多水的容器"></a>11. 盛最多水的容器</h4><p>双指针，计算容纳的水量，数字较小的指针向内移动，再次计算。时间 n，空间 1</p>
<h4 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15. 三数之和"></a>15. 三数之和</h4><p>排序 + 双指针，a + b + c &gt; target 就将 c 左移一个，排序时间 n log n，双指针时间 n^2，总时间 n^2。空间 log n</p>
<h4 id="16-最接近的三数之和"><a href="#16-最接近的三数之和" class="headerlink" title="16. 最接近的三数之和"></a>16. 最接近的三数之和</h4><p>排序 + 双指针，a + b + c &gt;= target 将 c 左移，&lt; target 将 b 右移</p>
<h4 id="17-电话号码的字母组合"><a href="#17-电话号码的字母组合" class="headerlink" title="17. 电话号码的字母组合"></a>17. 电话号码的字母组合</h4><p>回溯/队列，依次组合</p>
]]></content>
      <categories>
        <category>算法</category>
        <category>面试</category>
      </categories>
      <tags>
        <tag>author: cloxnu</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 基础总结</title>
    <url>/2020/11/18/ios-summary/</url>
    <content><![CDATA[<h2 id="GCD"><a href="#GCD" class="headerlink" title="GCD"></a>GCD</h2><ul>
<li>Grand Central Dispatch (GCD) 是异步执行任务的技术之一。开发者只需定义像执行的任务并追加到适当的 Dispatch Queue 中，GCD 就能生成必要的线程并计划执行任务。</li>
<li><strong>为什么需要长时间处理的任务应该在其他线程进行？</strong> 主线程是用来描绘用户界面、处理触摸屏幕的，如果在主线程执行长时间处理的任务，会妨碍主线程中被称为 RunLoop 的主循环的执行，从而导致不能更新用户界面、应用程序的画面长时间停滞。<a id="more"></a></li>
<li>Serial Dispatch Queue 是等待现在执行中处理</li>
<li>Concurrent Dispatch Queue 是不等待现在执行中处理</li>
<li>Serial Dispatch Queue 虽然可以使用 <code>dispatch_queue_create</code> 生成无数个线程，就可以并行执行，但是大量生成会使系统响应性能大幅度降低，Serial Dispatch Queue 主要用来避免数据竞争</li>
<li>Main Dispatch Queue 在主线程执行，更新用户界面必须在主线程执行，类型是 Serial Dispatch Queue</li>
<li>Global Dispatch Queue 是所有应用程序都能够使用的 Concurrent Dispatch Queue，有高、默认、低、后台四个优先级</li>
<li><code>dispatch_after</code> 在指定时间追加处理到 Dispatch Queue</li>
<li>Dispatch Group 可以用 <code>dispatch_group_notify</code> 或 <code>dispatch_group_wait</code> 等待 Dispatch Group 执行结束</li>
<li><code>dispatch_barrier_async</code> 会等待追加到 Concurrent Dispatch Queue 上的并行执行的处理全部结束后，再将指定的处理追加到该 CDQ 中。然后处理完后，再去处理后面的 CDQ</li>
<li><code>dispatch_apply</code> 用来按指定次数将指定的 block 追加到指定的 Dispatch Queue 中</li>
<li><code>dispatch_once</code> 保证只执行一次</li>
</ul>
<h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><ul>
<li>自动引用计数 ARC Automatic Reference Counting 内存管理中对引用采取自动计数的技术<ol>
<li>自己生成的对象，自己所持有 <code>NSObject * __strong obj = [[NSObject alloc] init];</code></li>
<li>非自己生成的对象，自己也能持有 <code>NSMutableArray * __strong array = [NSMutableArray array];</code></li>
<li>不再需要自己持有的对象时释放</li>
<li>非自己持有的对象无法释放<blockquote>
<p>生成并持有对象：<code>alloc/new/copy/mutablecopy</code> 等<br>持有对象：<code>retain</code><br>释放对象：<code>release</code><br>废弃对象：<code>dealloc</code>  </p>
</blockquote>
</li>
</ol>
</li>
<li> 「strong」对应所有权类型是 <code>__strong</code> 指向并持有对象，引用计数会+1，引用计数为 0 才会销毁，为 nil 会销毁</li>
<li>「weak」对应所有权类型是 <code>__weak</code> 指向但不持有对象，引用计数不会+1</li>
<li>「__unsafe_unretained」和 weak 类似，不同的是弱引用的对象废弃后此对象不会被赋值为 nil，为悬垂指针，继续方法可能会导致访问错误</li>
<li>「assign」对应所有权类型是 <code>__unsafe_unretained</code> 修饰基本数据类型，存储在栈中</li>
<li>「copy」对应所有权类型是 <code>__strong</code> 和 strong 类似，多用于修饰有可变类型的不可变对象</li>
<li>「__autoreleasing」与直接调用 autorelease 方法等价，前提是用 @autorelease 块替换 NSAutoreleasePool</li>
<li>「__strong」修饰符是 id 类型和对象类型默认的所有权修饰符，而「__autoreleasing」是 id 的指针或对象的指针默认的所有权修饰符</li>
<li><code>NSZone</code> 为了防止内存碎片化</li>
</ul>
]]></content>
      <categories>
        <category>iOS</category>
        <category>基础</category>
      </categories>
      <tags>
        <tag>author: cloxnu</tag>
        <tag>Swift</tag>
        <tag>Objective-C</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言 const 关键字的使用场景</title>
    <url>/2020/12/03/C-const-md/</url>
    <content><![CDATA[<h2 id="const-限定的变量"><a href="#const-限定的变量" class="headerlink" title="const 限定的变量"></a>const 限定的变量</h2><ul>
<li><p>被 const 声明的变量，在定义时赋值，然后后面就不能修改变量的值了。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> num = <span class="number">25</span>;<span class="comment">//定义 int 类型的 num 并且赋值</span></span><br><span class="line"><span class="comment">//num = 20;//num 为被 const 限定，不能再修改</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<a id="more"></a>

<h2 id="补充一下：指针——也称为指针变量"><a href="#补充一下：指针——也称为指针变量" class="headerlink" title="补充一下：指针——也称为指针变量"></a>补充一下：指针——也称为<strong>指针变量</strong></h2><ul>
<li><p>指针的使用</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> number = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> *p = &amp;number ;   <span class="comment">//定义一个 int 类型的【指针变量】p  (* 号作为一个标识符，代表这是一个指针),然后 p 指向 number</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="const-和指针变量的结合"><a href="#const-和指针变量的结合" class="headerlink" title="const 和指针变量的结合"></a>const 和指针变量的结合</h2><ul>
<li><p>指向 【常量】的【指针变量】</p>
<p>  写成const int *p = &amp;a ;</p>
<p>  或者int const *p = &amp;a ;</p>
<p>  都可以</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">25</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p = &amp;a ;<span class="comment">//定义 int 类型的指针变量， 指向 a//也可以</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//*p = 20;//尝试通过指针p修改 a 的值，不能的，因为 p 指向的 a 被 const 限定了。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dog = <span class="number">50</span>;</span><br><span class="line">p = &amp;a;<span class="comment">//修改 p 的指向，可以的，因为 p 是一个指针变量，是一个可变的值。</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>指针常量，也称为const类型指针。</p>
<p>const 写在 * 后面</p>
<blockquote>
<p>int * const ptr = &n;</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">int</span>  * <span class="keyword">const</span> ptr = &amp;n;<span class="comment">//指针不能变，但指向的内容（n）可以变</span></span><br><span class="line">*ptr = <span class="number">20</span>;            <span class="comment">//可以实现。</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>指向【常量】的【指针常量】</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//【非常量】的地址给指向【常量】的【指针变量】是安全的</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> * <span class="keyword">const</span> ptr = &amp;n;<span class="comment">//指针不能变，指向的内容(n)也不能变</span></span><br><span class="line"><span class="comment">//*ptr = 20;               //第一个 const 限定了 ptr 指向的内容不能被修改，所以这里会编译不通过。</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="const-的坑"><a href="#const-的坑" class="headerlink" title="const 的坑"></a>const 的坑</h2><p>常量：被 const 限定</p>
<p>变量：未被 const 限定</p>
<ul>
<li><p>常量（被 const 限定）的地址，赋给不带 const 的指针是不安全的。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> a = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> *p = &amp;a;<span class="comment">//很不安全</span></span><br><span class="line">*p=<span class="number">20</span>;      <span class="comment">//不安全的操作(Visual studio 不能编译，但 gcc 可以，只是 会有警告，最后可以运行，并且 a 的值会被改变)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>（常量或者变量）的地址，可以赋给带 const 的 int 指针</p>
<p>比如，下列函数只需要读取 a 的值用作显示，那么不需要修改 a，使用const可以防止 a 在函数体内被修改。而在调用时，给函数传递的 int 类型参数的地址,可以是 const 或者非 const 都可以。</p>
<p>函数拿到地址之后，只做读取而不修改</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> *a)</span></span>;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="二级指针不安全"><a href="#二级指针不安全" class="headerlink" title="二级指针不安全"></a>二级指针不安全</h2><ul>
<li><p>例子</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> n = <span class="number">8</span>;<span class="comment">//本意是 n 的值不能改变</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> * p1;</span><br><span class="line">p1 = &amp;n;</span><br><span class="line"><span class="keyword">int</span> ** pp2;</span><br><span class="line">pp2 = &amp;p1;     <span class="comment">//不安全，不能使用 const int **，初始化 int **pp2</span></span><br><span class="line"></span><br><span class="line">**pp2 = <span class="number">10</span>;    <span class="comment">//通过pp2修改到了n的值，违背本意。</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;n:%d\n&quot;</span>,n);</span><br></pre></td></tr></table></figure>

<p>(Visual studio会自动检测这种情况从而不让编译通过，但是C语言本身是可以编译通过的,只是会有下面的警告)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span>.c: 在函数‘main’中:</span><br><span class="line"><span class="keyword">new</span>.c:<span class="number">11</span>:<span class="number">8</span>: 警告：从不兼容的指针类型赋值 [-Wincompatible-pointer-types]</span><br><span class="line">  pp2 = &amp;p1;</span><br><span class="line">      ^</span><br><span class="line"><span class="keyword">new</span>.c:<span class="number">15</span>:<span class="number">4</span>: 警告：隐式声明函数‘system’ [-Wimplicit-function-declaration]</span><br><span class="line">  system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>gcc编译之后运行程序，结果n可以打印出来就是10</p>
<p>小结：<strong>n 被 const 限定了，但是却可以通过二级指针绕过这个限定</strong>，所以二级指针在误用的情况下很不安全。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>author: zanxinz</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>面试精选</title>
    <url>/2020/11/29/fxxk-interview/</url>
    <content><![CDATA[<h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><p>操作系统是控制应用程序执行的程序，是应用程序和计算机硬件间的接口</p>
<ul>
<li><strong>方便</strong>：操作系统使计算机更易于使用</li>
<li><strong>有效</strong>：操作系统允许以更有效地方式使用计算机系统资源</li>
<li><strong>扩展能力</strong>：在构造操作系统时，应允许在不妨碍服务的前提下，有效地开发、测试和引入新的系统功能</li>
</ul>
<a id="more"></a>

<h4 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h4><h5 id="Q-区别？"><a href="#Q-区别？" class="headerlink" title="Q: 区别？"></a>Q: 区别？</h5><ul>
<li><strong>「进程」</strong> <strong>是操作系统资源分配的基本单位</strong>。</li>
<li><strong>「线程」</strong> <strong>是任务调度和执行的基本单位</strong>。</li>
</ul>
<p>在开销方面：每个进程都有独立的代码和数据空间（程序上下文），程序之间的切换会有较大的开销；线程可以看做轻量级的进程，同一类线程共享代码和数据空间，每个线程都有自己独立的运行栈和程序计数器（PC），线程之间切换的开销小。</p>
<p>所处环境：在操作系统中能同时运行多个进程（程序）；而在同一个进程（程序）中有多个线程同时执行（通过CPU调度，在每个时间片中只有一个线程执行）</p>
<p>内存分配方面：系统在运行的时候会为每个进程分配不同的内存空间；而对线程而言，除了CPU外，系统不会为线程分配内存（线程所使用的资源来自其所属进程的资源），线程组之间只能共享资源。</p>
<p>包含关系：只有一个线程的进程可以看做是单进程的，如果一个进程内有多个线程，则执行过程不是一条线的，而是多条线（线程）共同完成的；线程是进程的一部分，所以线程也被称为轻权进程或者轻量级进程。</p>
<p><a href="https://blog.csdn.net/kuangsonghan/article/details/80674777">以上参考</a></p>
<p><a href="https://hit-alibaba.github.io/interview/basic/arch/Concurrency.html">分时系统、多任务</a></p>
<h5 id="Q-五状态模型？"><a href="#Q-五状态模型？" class="headerlink" title="Q: 五状态模型？"></a>Q: 五状态模型？</h5><ul>
<li><strong>「运行态」</strong> 进程正在执行</li>
<li><strong>「就绪态」</strong> 进程做好了准备，只要有机会就开始执行</li>
<li><strong>「阻塞/等待态」</strong> 进程在某些事件发生前不能执行，如 I/O 操作完成</li>
<li><strong>「新建态」</strong> 刚刚创建的进程，操作系统还未把它加入可执行进程组，它通常是进程控制块已经创建但还未加载到内存中的新进程</li>
<li><strong>「退出态」</strong> 操作系统从可执行进程组中释放出的进程，要么它自己已停止，要么它因某种原因被取消</li>
</ul>
<h5 id="Q-并发技术？"><a href="#Q-并发技术？" class="headerlink" title="Q: 并发技术？"></a>Q: 并发技术？</h5><ul>
<li><strong>「原子操作」</strong> 一个函数或动作由一个或多个指令的序列实现，对外不可见</li>
<li><strong>「临界区」</strong> 一段代码，在这段代码中进程将访问共享资源，当另外一个进程已在这段代码中运行时，这个进程就不能在这段代码中执行</li>
<li><strong>「互斥」</strong> 当一个进程在临界区访问共享资源时，其他进程不能进入该临界区访问任何共享资源的情形</li>
<li><strong>「死锁」</strong> 两个或两个以上的进程因每个进程都在等待其他进程做完某些事情而不能继续执行的情形</li>
<li><strong>「活锁」</strong> 两个或两个以上的进程为响应其他进程中的变化而持续改变自己的状态但不能做有用的工作的情形</li>
<li><strong>「竞争条件」</strong> 多个线程或进程在读写一个共享数据时，结果依赖于它们执行的相对时间的情形</li>
<li><strong>「饥饿」</strong> 一个可运行的进程尽管能继续执行，但被调度程序无限期地忽视，而不能被调度执行的情形</li>
</ul>
<p><a href="https://cloud.tencent.com/developer/article/1404062">一文看懂临界区、互斥锁、同步锁、临界区、信号量、自旋锁等名词</a></p>
<p>在操作系统中，进程是占有资源的最小单位（线程可以访问其所在进程内的所有资源，但线程本身并不占有资源或仅仅占有一点必须资源）。但对于某些资源来说，其在同一时间只能被一个进程所占用。这些一次只能被一个进程所占用的资源就是所谓的临界资源。</p>
<p>对于临界资源的访问，必须是互斥进行。也就是当临界资源被占用时，另一个申请临界资源的进程会被阻塞，直到其所申请的临界资源被释放。而进程内访问临界资源的代码被成为临界区。</p>
<ul>
<li><p><strong>「信号量」</strong> 把互斥锁推广到”N”的空间，同时允许有N个线程进入临界区的锁叫“信号量”。互斥量和信号量的实现都依赖TSL指令保证“检查-占锁”动作的原子性。</p>
</li>
<li><p><strong>「信号量」</strong> 用于进程间传递信号的一个整数值。在信号量上只可进行三种操作：初始化，递减和增加，这三种操作都是原子操作。递减阻塞进程，递增解除进程阻塞。</p>
</li>
<li><p><strong>「二元信号量」</strong> 只取 0 和 1 的信号量</p>
</li>
<li><p><strong>「管程」</strong> 把互斥量交给程序员使用太危险，有些编程语言实现了“管程”的特性，从编译器的层面保证了临界区的互斥，比如Java的synchronized关键字。</p>
</li>
<li><p><strong>「管程」</strong> 是由一种程序设计语言结构，它提供的功能与信号量相同，但更易于控制。</p>
</li>
<li><p><strong>「事件」</strong> 对象也可以通过通知操作的方式来保持线程的同步。并且可以实现不同进程中的线程同步操作。 </p>
</li>
</ul>
<h5 id="Q-互斥锁？自旋锁？"><a href="#Q-互斥锁？自旋锁？" class="headerlink" title="Q: 互斥锁？自旋锁？"></a>Q: 互斥锁？自旋锁？</h5><p>对于互斥锁来说，如果一个线程已经锁定了一个互斥锁，第二个线程又试图去获得这个互斥锁，则第二个线程将被挂起（即休眠，不占用 CPU 资源）。</p>
<p>在计算机系统中，频繁的挂起和切换线程，也是有成本的。自旋锁就是解决这个问题的。</p>
<p>自旋锁，指当一个线程在获取锁的时候，如果锁已经被其它线程获取，那么该线程将循环等待，然后不断的判断锁是否能够被成功获取，直到获取到锁才会退出循环。</p>
<p>容易看出，当资源等待的时间较长，用互斥锁让线程休眠，会消耗更少的资源。当资源等待的时间较短时，使用自旋锁将减少线程的切换，获得更高的性能。</p>
<h5 id="Q-重入锁？不可重入锁？"><a href="#Q-重入锁？不可重入锁？" class="headerlink" title="Q: 重入锁？不可重入锁？"></a>Q: 重入锁？不可重入锁？</h5><p>可重入锁（ReetrantLock），也叫做递归锁，指的是在同一线程内，外层函数获得锁之后，内层递归函数仍然可以获取到该锁。换一种说法：同一个线程再次进入同步代码时，可以使用自己已获取到的锁。</p>
<p>使用可重入锁时，在同一线程中多次获取锁，不会导致死锁。使用不可重入锁，则会导致死锁发生。</p>
<p><a href="https://hit-alibaba.github.io/interview/basic/arch/Concurrency.html">参考</a></p>
<h5 id="Q-死锁的条件？"><a href="#Q-死锁的条件？" class="headerlink" title="Q: 死锁的条件？"></a>Q: 死锁的条件？</h5><ul>
<li><strong>「互斥」</strong> 一次只有一个进程可以使用一个资源。其他进程不能访问已分配给其他进程的资源。</li>
<li><strong>「占有且等待」</strong> 当一个进程等待其他进程时，继续占有已分配的资源</li>
<li><strong>「不可抢占」</strong> 不能强行抢占进程已占有的资源</li>
<li><strong>「循环等待」</strong> 存在一个闭合的进程链，每个进程至少占有此链中下一个进程所需的一个资源</li>
</ul>
<h5 id="Q-进程间通信？"><a href="#Q-进程间通信？" class="headerlink" title="Q: 进程间通信？"></a>Q: 进程间通信？</h5><ul>
<li><strong>「管道」</strong> 命名管道和匿名管道，只有具有“血缘”关系的进程才可共享匿名管道，而不相关的进程只能共享命名管道</li>
<li><strong>「消息」</strong> 是有类型的一段文本。每个进程都有一个与之相关联的消息队列，其功能类似于信箱</li>
<li><strong>「共享内存」</strong> 是 UNIX 所提供的进程间通信手段中速度最快的一种。虚存中由多个进程共享的一个公共内存块。</li>
</ul>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>author: cloxnu</tag>
      </tags>
  </entry>
</search>
