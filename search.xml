<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>如何在没接触过 macOS 开发的情况下 4 个小时写一个学校爬电费状态栏 App</title>
    <url>/2019/12/08/energy-charge-in-macos/</url>
    <content><![CDATA[<p><a href="https://github.com/CLOXnu/Energy_Charge_in_MacOS">GitHub 链接</a></p>
<h2 id="2020-05-23-00-35-更新"><a href="#2020-05-23-00-35-更新" class="headerlink" title="2020-05-23 00:35 更新"></a>2020-05-23 00:35 更新</h2><p>连接错误变灰</p>


<p>低电费变红</p>
<img src="/2019/12/08/energy-charge-in-macos/charge_low.jpg" class="" title="charge_low">

<p>其他寝室</p>
<img src="/2019/12/08/energy-charge-in-macos/other_room.jpg" class="" title="other_room">

<h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>学校寝室里配了台台式，写了大半学期的 iOS，这一切都如此顺利。</p>
<p>不过就在刚刚，一位大佬朋友突然向我展示了他找到的查寝室电费网址 POST 参数。这不禁让我陷入了思考（因为平常我得经常看着点电费不然没电费了电脑黑屏警告233）。然后我顺便查了下我们寝室的电费，nm只有 1 块 5 了！！！</p>
<p>开发一个 macOS 的爬电费 App 就这样开始了。</p>
<p>—- 四个小时前</p>
<a id="more"></a>

<h2 id="Hardworking…"><a href="#Hardworking…" class="headerlink" title="Hardworking…"></a>Hardworking…</h2><p>Xcode - File - New - Project…</p>
<p>然后选择 macOS App，这一切看起来如此自然，然而第一个困扰我的出现了 — url request 如何实现。</p>
<p>一向喜欢用第三方库的我，果不其然又发现了一个好用的 url request 库，它叫 <code>Alamofire</code>。这个库用来写请求超级超级容易，不过我完全不知道请求完成后得到的 <code>request</code> 应该怎么用，后来找到它的文档这里</p>
<img src="/2019/12/08/energy-charge-in-macos/Alamofire.png" class="" title="Alamofire">

<p>噢，原来我获得的就是这个网址的 JSON 数据，我只需要使用官方的 <code>JSONSerialization</code> 类就行了，于是我就写成了下面这样，把 JSON 转换 <code>NSDictionary</code> 一层层不断获取，成功得到了电费数值，并将它们写到一个类里去，加了一些代理以便其他类能够得到电费变更通知或错误通知。</p>
<img src="/2019/12/08/energy-charge-in-macos/code.png" class="" title="code">

<p>可能你们都看到了，我设定了一个定时器每隔 5 分钟获取一次数据（虽然不知道会不会有电脑睡眠断定时器之类的问题毕竟这是 1.0 版本不想考虑那么多），于是我寻思还需要增加一个手动更新数据的位置，而且查看数据肯定要一个方便的位置，emmmm，就状态栏吧，看那么多应用都在上面应该没啥问题。。。</p>
<p>于是，第二个难点。。。如何在状态栏显示内容。</p>
<p>其实了解之后还是很简单，在 Storyboard 加一个菜单列表就行了，然后在一个新的类里把这个菜单设为状态栏菜单。看起来挺简单吧，操作起来也挺简单的。</p>
<img src="/2019/12/08/energy-charge-in-macos/storyboard.png" class="" title="storyboard">

<p>好了，四个小时过去了，这个小插件其实很简单，但自己也学到了不少。</p>
<h2 id="成型"><a href="#成型" class="headerlink" title="成型"></a>成型</h2><img src="/2019/12/08/energy-charge-in-macos/display.png" class="" title="display">
]]></content>
      <categories>
        <category>macOS</category>
      </categories>
      <tags>
        <tag>[object Object]</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title>Get Start</title>
    <url>/2020/11/06/get-start/</url>
    <content><![CDATA[<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>请确保本机已安装 npm，<a href="https://www.npmjs.com/get-npm">官方链接</a></p>
<p>请确保已经 clone 这个 repo，<a href="https://github.com/bi-bi-boom/ERROR_LOG">GitHub 链接</a></p>
<p>请确保本机已安装 hexo，<a href="https://hexo.io/zh-cn/">官方链接</a></p>
<p>在根目录下运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h2><p>hexo 的规则参考 <a href="https://hexo.io/zh-cn/docs/writing">官网 doc</a></p>
<p>发布时，运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo g</span></span><br></pre></td></tr></table></figure>
<p>来生成 public/ 目录；</p>
<p>运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo d</span></span><br></pre></td></tr></table></figure>
<p>上传到 GitHub。</p>
<blockquote>
<p>关于文字排版参考 <a href="https://github.com/xitu/gold-miner/wiki/%E8%AF%91%E6%96%87%E6%8E%92%E7%89%88%E8%A7%84%E5%88%99%E6%8C%87%E5%8C%97">这篇文章</a></p>
</blockquote>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
  </entry>
  <entry>
    <title>test</title>
    <url>/2020/11/05/test/</url>
    <content><![CDATA[<h1 id="标题-1"><a href="#标题-1" class="headerlink" title="标题 1"></a>标题 1</h1><h2 id="标题-2"><a href="#标题-2" class="headerlink" title="标题 2"></a>标题 2</h2><h3 id="标题-3"><a href="#标题-3" class="headerlink" title="标题 3"></a>标题 3</h3><h4 id="标题-4"><a href="#标题-4" class="headerlink" title="标题 4"></a>标题 4</h4><h5 id="标题-5"><a href="#标题-5" class="headerlink" title="标题 5"></a>标题 5</h5><h6 id="标题-6"><a href="#标题-6" class="headerlink" title="标题 6"></a>标题 6</h6><p>嗨，这里是中文测试。</p>
<p>Hey, there is english test.</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">code test</span><br></pre></td></tr></table></figure>

<p>javascript 代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">6</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Hello world&quot;</span>); <span class="comment">// 中文注释</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The <code>code</code> block looks good.</p>
<blockquote>
<p>quote block<br>引用块</p>
</blockquote>
<p><em>The</em> Bi-Bi-Boom <em>is</em> a <strong>team</strong> dedicated to <strong>BOOM</strong>. <del>line</del></p>
]]></content>
      <categories>
        <category>TEST</category>
      </categories>
  </entry>
  <entry>
    <title>基于 jsdelivr 的简单建站思路</title>
    <url>/2020/11/08/simple-website-building-ideas-based-on-jsdelivr/</url>
    <content><![CDATA[<h2 id="总体思路"><a href="#总体思路" class="headerlink" title="总体思路"></a>总体思路</h2>]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>[object Object]</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 Python 的 Kivy 开发：首次配置 kivy</title>
    <url>/2020/11/08/Kivy-Firstly-Set/</url>
    <content><![CDATA[<h1 id="kivy"><a href="#kivy" class="headerlink" title="kivy"></a>kivy</h1><ul>
<li>kivy 是一个基于 Python 的 App 开发框架，基于 kivy进行移动端的 APP 开发是一个不错的选择。</li>
<li>首先，演示一下在 win10 环境下配置 kivy。</li>
</ul>
<p>1.直接 <code>pip install kivy</code></p>
<ul>
<li>自己写个 main.py 作为测试</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> kivy.app <span class="keyword">import</span> App</span><br><span class="line"><span class="keyword">from</span> kivy.uix.label <span class="keyword">import</span> Label</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainApp</span>(<span class="params">App</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build</span>(<span class="params">self</span>):</span></span><br><span class="line">        label = Label(text=<span class="string">&#x27;Hello from Kivy&#x27;</span>,</span><br><span class="line">                      size_hint=(<span class="number">.5</span>, <span class="number">.5</span>),</span><br><span class="line">                      pos_hint=&#123;<span class="string">&#x27;center_x&#x27;</span>: <span class="number">.5</span>, <span class="string">&#x27;center_y&#x27;</span>: <span class="number">.5</span>&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> label</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = MainApp()</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<ul>
<li>如果遇到问题 </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[CRITICAL] [App         ] Unable to get a Text provider, abort.</span><br></pre></td></tr></table></figure>

<p>则 terminal 执行下列语句（可能需要梯子）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install --upgraade pip wheel setuptools</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install docutils pygments pypiwin32 kivy.deps.sdl2 kivy.deps.glew</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install kivy.deps.gstreamer </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install kivy.deps.angle</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install --upgrade kivy</span></span><br></pre></td></tr></table></figure>

<p>2.运行之后可以看见下图，说明成功</p>



]]></content>
      <categories>
        <category>Kivy</category>
      </categories>
      <tags>
        <tag>author: zanxinz</tag>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
